{
  "name": "parse-dashboard",
  "parseDashboardFeatures": [
    "Data Browser",
    "Cloud Code Viewer",
    "Parse Config",
    "API Console",
    "Class Level Permissions Editor",
    "Pointer Permissions Editor",
    "Send Push Notifications",
    "Logs Viewer",
    "Push Status Page",
    "Relation Editor"
  ],
  "description": "The Parse Dashboard",
  "keywords": [
    "parse",
    "dashboard"
  ],
  "homepage": "https://github.com/ParsePlatform/parse-dashboard",
  "bugs": {
    "url": "https://github.com/ParsePlatform/parse-dashboard/issues"
  },
  "version": "1.0.18",
  "repository": {
    "type": "git",
    "url": "https://github.com/ParsePlatform/parse-dashboard"
  },
  "license": "SEE LICENSE IN LICENSE",
  "files": [
    "Parse-Dashboard",
    "bin",
    "README.md",
    "LICENSE"
  ],
  "dependencies": {
    "basic-auth": "^1.0.3",
    "commander": "^2.9.0",
    "express": "^4.13.4",
    "json-file-plus": "^3.2.0",
    "package-json": "^2.3.1",
    "bcryptjs": "^2.3.0"
  },
  "devDependencies": {
    "babel-core": "~5.8.12",
    "babel-loader": "~5.3.0",
    "babel-plugin-remove-proptypes": "~1.0.0",
    "babel-polyfill": "^6.7.2",
    "babel-runtime": "~5.8.25",
    "css-loader": "~0.18.0",
    "file-loader": "^0.8.5",
    "history": "^2.1.2",
    "http-server": "~0.8.5",
    "immutable": "~3.7.5",
    "immutable-devtools": "~0.0.4",
    "jest-cli": "^12.0.2",
    "js-beautify": "~1.5.0",
    "marked": "^0.3.5",
    "node-sass": "^3.7.0",
    "parse": "1.6.14",
    "prismjs": "~1.2.0",
    "react": "^15.0.1",
    "react-addons-test-utils": "^15.0.1",
    "react-dnd": "~2.1.4",
    "react-dnd-html5-backend": "~2.0.0",
    "react-dom": "^15.0.1",
    "react-router": "^2.6.0",
    "request-promise": "^4.1.1",
    "sass-loader": "~3.1.2",
    "style-loader": "~0.12.3",
    "svg-prep": "~1.0.0",
    "transform-jest-deps": "^2.1.0",
    "webpack": "~1.12.0"
  },
  "scripts": {
    "dev": "node ./Parse-Dashboard/index.js & webpack --config webpack/build.config.js --devtool eval-source-map --progress --watch",
    "dashboard": "node ./Parse-Dashboard/index.js & webpack --config webpack/build.config.js --progress --watch",
    "pig": "http-server ./PIG -p 4041 -s & webpack --config webpack/PIG.config.js --progress --watch",
    "build": "NODE_ENV=production webpack --config webpack/production.config.js && webpack --config webpack/PIG.config.js",
    "test": "NODE_PATH=./node_modules jest",
    "generate": "node scripts/generate.js",
    "prepublish": "webpack --config webpack/publish.config.js",
    "start": "node ./Parse-Dashboard/index.js"
  },
  "bin": {
    "parse-dashboard": "./bin/parse-dashboard"
  },
  "engines": {
    "node": ">=4.3"
  },
  "main": "Parse-Dashboard/app.js",
  "jest": {
    "testPathDirs": [
      "src/lib"
    ],
    "scriptPreprocessor": "<rootDir>/testing/preprocessor.js",
    "testDirectoryName": "tests",
    "testFileExtensions": [
      "test.js"
    ],
    "unmockedModulePathPatterns": [
      "react",
      "react-dom",
      "react-addons-test-utils",
      "fbjs"
    ]
  },
  "readme": "# Parse Dashboard\n\n[![Build Status](https://img.shields.io/travis/ParsePlatform/parse-dashboard/master.svg?style=flat)](https://travis-ci.org/ParsePlatform/parse-dashboard)\n[![npm version](https://img.shields.io/npm/v/parse-dashboard.svg?style=flat)](https://www.npmjs.com/package/parse-dashboard)\n\nParse Dashboard is a standalone dashboard for managing your Parse apps. You can use it to manage your [Parse Server](https://github.com/ParsePlatform/parse-server) apps and your apps that are running on [Parse.com](https://Parse.com).\n\n* [Getting Started](#getting-started)\n* [Local Installation](#local-installation)\n  * [Configuring Parse Dashboard](#configuring-parse-dashboard)\n  * [Managing Multiple Apps](#managing-multiple-apps)\n  * [Other Configuration Options](#other-configuration-options)\n* [Running as Express Middleware](#running-as-express-middleware)\n* [Deploying Parse Dashboard](#deploying-parse-dashboard)\n  * [Preparing for Deployment](#preparing-for-deployment)\n  * [Security Considerations](#security-considerations)\n    * [Configuring Basic Authentication](#configuring-basic-authentication)\n    * [Separating App Access Based on User Identity](#separating-app-access-based-on-user-identity)\n  * [Run with Docker](#run-with-docker)\n* [Contributing](#contributing)\n\n# Getting Started\n\n[Node.js](https://nodejs.org) version >= 4.3 is required to run the dashboard. You also need to be using Parse Server version 2.1.4 or higher.\n\n# Local Installation\n\nInstall the dashboard from `npm`.\n\n```\nnpm install -g parse-dashboard\n```\n\nYou can launch the dashboard for an app with a single command by supplying an app ID, master key, URL, and name like this:\n\n```\nparse-dashboard --appId yourAppId --masterKey yourMasterKey --serverURL \"https://example.com/parse\" --appName optionalName\n```\n\nYou may set the host, port and mount path by supplying the `--host`, `--port` and `--mountPath` options to parse-dashboard. You can use anything you want as the app name, or leave it out in which case the app ID will be used.\n\nAfter starting the dashboard, you can visit http://localhost:4040 in your browser:\n\n![Parse Dashboard](.github/dash-shot.png)\n\n## Configuring Parse Dashboard\n\n### File\n\nYou can also start the dashboard from the command line with a config file.  To do this, create a new file called `parse-dashboard-config.json` inside your local Parse Dashboard directory hierarchy.  The file should match the following format:\n\n```json\n{\n  \"apps\": [\n    {\n      \"serverURL\": \"http://localhost:1337/parse\",\n      \"appId\": \"myAppId\",\n      \"masterKey\": \"myMasterKey\",\n      \"appName\": \"MyApp\"\n    }\n  ]\n}\n```\n\nYou can then start the dashboard using `parse-dashboard --config parse-dashboard-config.json`.\n\n### Environment variables\n\n> This only works when starting the app using the `parse-dashboard` command\n\nThere are also two methods you can use to configure the dashboard using environment variables.\n\n#### Multiple apps\n\nProvide the entire JSON configuration in `PARSE_DASHBOARD_CONFIG` and it will be parsed just like the config file.\n\n#### Single app\n\nYou can also define each configuration option individually.\n\n```\nHOST: \"0.0.0.0\"\nPORT: \"4040\"\nMOUNT_PATH: \"/\"\nPARSE_DASHBOARD_ALLOW_INSECURE_HTTP: undefined // Or \"1\" to allow http\nPARSE_DASHBOARD_SERVER_URL: \"http://localhost:1337/parse\"\nPARSE_DASHBOARD_MASTER_KEY: \"myMasterKey\"\nPARSE_DASHBOARD_APP_ID: \"myAppId\"\nPARSE_DASHBOARD_APP_NAME: \"MyApp\"\nPARSE_DASHBOARD_USER_ID: \"user1\"\nPARSE_DASHBOARD_USER_PASSWORD: \"pass\"\nPARSE_DASHBOARD_SSL_KEY: \"sslKey\"\nPARSE_DASHBOARD_SSL_CERT: \"sslCert\"\nPARSE_DASHBOARD_CONFIG: undefined // Only for reference, it must not exist\n```\n\n## Managing Multiple Apps\n\nManaging multiple apps from the same dashboard is also possible.  Simply add additional entries into the `parse-dashboard-config.json` file's `\"apps\"` array.\n\nYou can manage self-hosted [Parse Server](https://github.com/ParsePlatform/parse-server) apps, *and* apps that are hosted on [Parse.com](http://parse.com/) from the same dashboard. In your config file, you will need to add the `restKey` and `javascriptKey` as well as the other paramaters, which you can find on `dashboard.parse.com`. Set the serverURL to `http://api.parse.com/1`:\n\n```js\n{\n  \"apps\": [\n    {\n      \"serverURL\": \"https://api.parse.com/1\", // Hosted on Parse.com\n      \"appId\": \"myAppId\",\n      \"masterKey\": \"myMasterKey\",\n      \"javascriptKey\": \"myJavascriptKey\",\n      \"restKey\": \"myRestKey\",\n      \"appName\": \"My Parse.Com App\",\n      \"production\": true\n    },\n    {\n      \"serverURL\": \"http://localhost:1337/parse\", // Self-hosted Parse Server\n      \"appId\": \"myAppId\",\n      \"masterKey\": \"myMasterKey\",\n      \"appName\": \"My Parse Server App\"\n    }\n  ]\n}\n```\n\n## App Icon Configuration\n\nParse Dashboard supports adding an optional icon for each app, so you can identify them easier in the list. To do so, you *must* use the configuration file, define an `iconsFolder` in it, and define the `iconName` parameter for each app (including the extension). The path of the `iconsFolder` is relative to the configuration file. If you have installed ParseDashboard globally you need to use the full path as value for the `iconsFolder`. To visualize what it means, in the following example `icons` is a directory located under the same directory as the configuration file:\n\n```json\n{\n  \"apps\": [\n    {\n      \"serverURL\": \"http://localhost:1337/parse\",\n      \"appId\": \"myAppId\",\n      \"masterKey\": \"myMasterKey\",\n      \"appName\": \"My Parse Server App\",\n      \"iconName\": \"MyAppIcon.png\",\n    }\n  ],\n  \"iconsFolder\": \"icons\"\n}\n```\n\n## Other Configuration Options\n\nYou can set `appNameForURL` in the config file for each app to control the url of your app within the dashboard. This can make it easier to use bookmarks or share links on your dashboard.\n\nTo change the app to production, simply set `production` to `true` in your config file. The default value is false if not specified.\n\n# Running as Express Middleware\n\nInstead of starting Parse Dashboard with the CLI, you can also run it as an [express](https://github.com/expressjs/express) middleware.\n\n```\nvar express = require('express');\nvar ParseDashboard = require('parse-dashboard');\n\nvar dashboard = new ParseDashboard({\n  \"apps\": [\n    {\n      \"serverURL\": \"http://localhost:1337/parse\",\n      \"appId\": \"myAppId\",\n      \"masterKey\": \"myMasterKey\",\n      \"appName\": \"MyApp\"\n    }\n  ]\n});\n\nvar app = express();\n\n// make the Parse Dashboard available at /dashboard\napp.use('/dashboard', dashboard);\n\nvar httpServer = require('http').createServer(app);\nhttpServer.listen(4040);\n```\n\nIf you want to run both [Parse Server](https://github.com/ParsePlatform/parse-server) and Parse Dashboard on the same server/port, you can run them both as express middleware:\n\n```\nvar express = require('express');\nvar ParseServer = require('parse-server').ParseServer;\nvar ParseDashboard = require('parse-dashboard');\n\nvar allowInsecureHTTP = false\n\nvar api = new ParseServer({\n\t// Parse Server settings\n});\n\nvar dashboard = new ParseDashboard({\n\t// Parse Dashboard settings\n}, allowInsecureHTTP);\n\nvar app = express();\n\n// make the Parse Server available at /parse\napp.use('/parse', api);\n\n// make the Parse Dashboard available at /dashboard\napp.use('/dashboard', dashboard);\n\nvar httpServer = require('http').createServer(app);\nhttpServer.listen(4040);\n```\n\n# Deploying Parse Dashboard\n\n## Preparing for Deployment\n\nMake sure the server URLs for your apps can be accessed by your browser. If you are deploying the dashboard, then `localhost` urls will not work.\n\n## Security Considerations\nIn order to securely deploy the dashboard without leaking your apps master key, you will need to use HTTPS and Basic Authentication.\n\nThe deployed dashboard detects if you are using a secure connection. If you are deploying the dashboard behind a load balancer or proxy that does early SSL termination, then the app won't be able to detect that the connection is secure. In this case, you can start the dashboard with the `--allowInsecureHTTP=1` option. You will then be responsible for ensureing that your proxy or load balancer only allows HTTPS.\n\n### Configuring Basic Authentication\nYou can configure your dashboard for Basic Authentication by adding usernames and passwords your `parse-dashboard-config.json` configuration file:\n\n```json\n{\n  \"apps\": [{\"...\": \"...\"}],\n  \"users\": [\n    {\n      \"user\":\"user1\",\n      \"pass\":\"pass\"\n    },\n    {\n      \"user\":\"user2\",\n      \"pass\":\"pass\"\n    }\n  ]\n}\n```\n\nYou can store the password in either `plain text` or `bcrypt` formats. You can encrypt the password using any online bcrypt tool e.g. [https://www.bcrypt-generator.com](https://www.bcrypt-generator.com).\n\n### Separating App Access Based on User Identity\nIf you have configured your dashboard to manage multiple applications, you can restrict the management of apps based on user identity.\n\nTo do so, update your `parse-dashboard-config.json` configuration file to match the following format:\n\n```json\n{\n  \"apps\": [{\"...\": \"...\"}],\n  \"users\": [\n     {\n       \"user\":\"user1\",\n       \"pass\":\"pass1\",\n       \"apps\": [{\"appId\": \"myAppId1\"}, {\"appId\": \"myAppId2\"}]\n     },\n     {\n       \"user\":\"user2\",\n       \"pass\":\"pass2\",\n       \"apps\": [{\"appId\": \"myAppId1\"}]\n     }  ]\n}\n```\nThe effect of such a configuration is as follows:\n\nWhen `user1` logs in, he/she will be able to manage `myAppId1` and `myAppId2` from the dashboard.\n\nWhen *`user2`*  logs in, he/she will only be able to manage *`myAppId1`* from the dashboard.\n\n\n## Run with Docker\n\nIt is easy to use it with Docker. First build the image:\n\n```\ndocker build -t parse-dashboard .\n```\n\nRun the image with your ``config.json`` mounted as a volume\n\n```\ndocker run -d -p 8080:4040 -v host/path/to/config.json:/src/Parse-Dashboard/parse-dashboard-config.json parse-dashboard\n```\n\nBy default, the container will start the app at port 4040 inside the container. However, you can run custom command as well (see ``Deploying in production`` for custom setup).\n\nIn this example, we want to run the application in production mode at port 80 of the host machine.\n\n```\ndocker run -d -p 80:8080 -v host/path/to/config.json:/src/Parse-Dashboard/parse-dashboard-config.json parse-dashboard --port 8080\n```\n\nIf you are not familiar with Docker, ``--port 8080`` will be passed in as argument to the entrypoint to form the full command ``npm start -- --port 8080``. The application will start at port 8080 inside the container and port ``8080`` will be mounted to port ``80`` on your host machine.\n\n# Contributing\n\nWe really want Parse to be yours, to see it grow and thrive in the open source community. Please see the [Contributing to Parse Dashboard guide](CONTRIBUTING.md).\n",
  "readmeFilename": "README.md",
  "_id": "parse-dashboard@1.0.18",
  "_from": "parse-dashboard@"
}
